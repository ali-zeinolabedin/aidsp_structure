#-------------------------------------------
#  Module : Makefile.project.iverilog
#  Author : Ali Zeinolabedin (based on stimc)
#  Company: Blackrock Neurotech
#-------------------------------------------

DUMPER          ?=

# ------------  configuration parameters ---------------------------------------
VVP_LOG         ?= $(WORK_DIR)/$(SIM_NAME).log
DUMP_MOD        ?= $(WORK_DIR)/dump.v
DUMP_MOD_NAME   ?= $(notdir $(basename $(DUMP_MOD)))

# ------------  name of vvp file  ----------------------------------------------
VVP_FILE        ?= $(WORK_DIR)/$(SIM_NAME)-simulate
VVP_FILE_NET    ?= $(WORK_DIR)/$(SIM_NAME)-simulate-netlist

USER_MACRO      ?= 

#===============================================================================
# The following statements usually need not to be changed
#===============================================================================
# ------------  build and run tools  -------------------------------------------
IVERILOG        ?= iverilog
VVP             ?= vvp

# ------------  tool flags for vvp  --------------------------------------------
VVP_FLAGS       ?= -n -i -l$(VVP_LOG)
VVP_EXTARGS     ?=
VVP_EXTARGS_RUN ?= -none

# ------------  tool flags for iverilog  ---------------------------------------
# -Wall 
IVERILOG_FLAGS  ?=  -Wno-timescale  -Wno-implicit-dimensions \
                   -Wno-sensitivity-entire-array -Wno-portbind \
                   -g2005-sv $(USER_MACRO)
VLOG_SRC_ARGS   += $(addprefix -f ,$(VLOG_SRC_FILES))
VLOG_SOURCES    += $(foreach f,$(VLOG_SRC_FILES), $(shell echo $(shell cat $f | sed -e 'sX^\(\#\|//\).*XX')))
#$(info $(VLOG_SOURCES))

VLOG_SRC_ARGS_NET   += $(addprefix -f ,$(VLOG_SRC_FILES_NET))
VLOG_SOURCES_NET    += $(foreach f,$(VLOG_SRC_FILES_NET), $(shell echo $(shell cat $f | sed -e 'sX^\(\#\|//\).*XX')))
#$(info $(VLOG_SOURCES_NET))


# ------------  tool flags for stimc  ------------------------------------------


# ------------  info output ----------------------------------------------------
info-vlog:
ifneq (,$(strip $(VLOG_INCDIRS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-INCDIRS$${c}$(shell $(call shell-fmtflags,$(addprefix -I,$(VLOG_INCDIRS))))")
endif
ifneq (,$(strip $(IVERILOG_FLAGS) $(ADDITIONAL_IVERILOG_FLAGS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-FLAGS$${c}$(shell $(call shell-fmtflags,$(IVERILOG_FLAGS) $(ADDITIONAL_IVERILOG_FLAGS)))")
endif

.PHONY: info-vlog  

# ------------  rules ----------------------------------------------------------

$(VVP_FILE): $(VLOG_SOURCES) $(DUMP_MOD) $(COMPILE_DEPS) $(filter-out %.dep,$(MAKEFILE_LIST)) | $(WORK_DIR) info-vlog
	$q$(call echo, "$${b}$(vlogcolor)VLOG$${c} $$(basename $(VVP_FILE))")
	$q$(IVERILOG) $(addprefix -s, $(TOPLEVEL)) $(addprefix -I,$(VLOG_INCDIRS)) $(IVERILOG_FLAGS) $(ADDITIONAL_IVERILOG_FLAGS) $(VLOG_SRC_ARGS) $(DUMP_MOD) -o $@

$(VVP_FILE_NET): $(VLOG_SOURCES_NET) $(DUMP_MOD) $(COMPILE_DEPS) $(filter-out %.dep,$(MAKEFILE_LIST)) | $(WORK_DIR) info-vlog
	$q$(call echo, "$${b}$(vlogcolor)VLOG$${c} $$(basename $(VVP_FILE_NET))")
	$q$(IVERILOG) -Tmax $(addprefix -s, $(TOPLEVEL)) $(addprefix -I,$(VLOG_INCDIRS)) $(IVERILOG_FLAGS) $(ADDITIONAL_IVERILOG_FLAGS) $(VLOG_SRC_ARGS_NET) $(DUMP_MOD) -o $@

$(DUMPFILE): $(VVP_FILE) $(VPI_MODULE) $(RUN_DEPS) $(MAKEFILE_LIST)
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE))\n")
	$qIVERILOG_DUMPER=${DUMPER} $(VVP) $(VVP_FLAGS) $(VVP_FILE) $(DUMPMODE) $(VVP_EXTARGS)

$(DUMPFILENET): $(VVP_FILE_NET) $(VPI_MODULE) $(RUN_DEPS) $(MAKEFILE_LIST)
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE_NET))\n")
	$qIVERILOG_DUMPER=${DUMPER} $(VVP)  $(VVP_FLAGS) $(VVP_FILE_NET) $(DUMPMODE) $(VVP_EXTARGS) 

	

#$qIVERILOG_DUMPER=${DUMPER} $(VVP) $(VVP_FLAGS) $(VVP_FILE) $(DUMPMODE) $(VVP_EXTARGS) 


vlog: $(VVP_FILE)

vlog-net: $(VVP_FILE_NET)

elab: vlog

run: $(VVP_FILE) $(VPI_MODULE) Makefile
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE))\n")
	$q$(VVP) $(VVP_FLAGS) $(VVP_FILE) $(DUMPMODE) $(VVP_EXTARGS_RUN)

runnet: $(VVP_FILE_NET) $(VPI_MODULE) Makefile
	$q$(call echo, "\n$${b}$(runcolor)RUNNET $${c} $$(basename $(VVP_FILE_NET))\n")
	$q$(VVP) $(VVP_FLAGS) $(VVP_FILE_NET) $(DUMPMODE) $(VVP_EXTARGS_RUN)

runbatch: $(VVP_FILE) $(VPI_MODULE) Makefile
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE))\n")
	$q$(VVP) $(VVP_FLAGS) $(VVP_FILE) $(DUMPMODE) $(VVP_EXTARGS_RUN) 2>&1 | tee $(BATCH_LOG)

runnetbatch: $(VVP_FILE_NET) $(VPI_MODULE) Makefile
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE_NET))\n")
	$q$(VVP) $(VVP_FLAGS) $(VVP_FILE_NET) $(DUMPMODE) $(VVP_EXTARGS_RUN) 2>&1 | tee $(BATCH_LOG)

#this could be used for running the coverage on regression and avoid opening the gui and create a batch file: it is used for running coverage via regression script
runbatch_dump:$(VVP_FILE) $(VPI_MODULE) Makefile
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $$(basename $(VVP_FILE))\n")
	$q$(VVP) $(VVP_FLAGS) $(VVP_FILE) $(DUMPMODE) $(VVP_EXTARGS_RUN) -${DUMPER} 2>&1 | tee $(BATCH_LOG) 

rerun: $(DUMPFILE) 

rungui: $(DUMPFILE)
	$q$(MAKE) --no-print-directory gui

#later improve the make file to address netgui, but for now it is enough
runnetgui: $(DUMPFILENET)
	$q$(MAKE) --no-print-directory gui

# This is the target that displays the running time
show_time: 
	$qstart_time=$$(date +%s); \
	make runbatch; \
	end_time=$$(date +%s); \
	RUNNING_TIME=$$(expr $$end_time - $$start_time); \
	echo "Start time at $${start_time}";\
	echo "End time at $${end_time}" ; \
    echo "Task completed in $$RUNNING_TIME seconds."

show_time_gui: 
	$qstart_time=$$(date +%s); \
	make rungui; \
	end_time=$$(date +%s); \
	RUNNING_TIME=$$(expr $$end_time - $$start_time); \
	echo "Start time at $${start_time}";\
	echo "End time at $${end_time}" ; \
    echo "Task completed in $$RUNNING_TIME seconds."



$(DUMP_MOD): | $(WORK_DIR)
	@echo 'module $(DUMP_MOD_NAME) ();'     > $@
	@echo 'initial begin'                  >> $@
	@echo '    $$dumpfile("$(DUMPFILE)");' >> $@
	@echo '    $$dumpvars(0,$(SIM_NAME));' >> $@
	@echo 'end'                            >> $@
	@echo 'endmodule'                      >> $@

clean-vlog:
	$qrm -f \
        $(VVP_FILE) $(DUMPFILE) $(VVP_LOG)  \
        2> /dev/null || true
	$qrm -f $(WORK_DIR)/$(DUMPFILE).hier

.PHONY: vlog elab run runbatch rungui rerun clean-vlog runbatch_dump
